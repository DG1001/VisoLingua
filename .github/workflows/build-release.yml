name: Build and Release VisoLingua

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Create icon
      run: |
        python create_icon.py
        
    - name: Build executable
      run: |
        python build_exe.py
        
    - name: Verify build
      run: |
        if (Test-Path "dist/VisoLingua.exe") {
          Write-Host "‚úÖ Build successful!"
          $size = (Get-Item "dist/VisoLingua.exe").Length / 1MB
          Write-Host "üìè Size: $($size.ToString('F1')) MB"
        } else {
          Write-Host "‚ùå Build failed - executable not found"
          exit 1
        }
        
    - name: Create portable package
      run: |
        # Create portable directory manually (since create_portable.bat uses Windows-specific commands)
        $portableDir = "VisoLingua-Portable"
        New-Item -ItemType Directory -Path $portableDir -Force
        
        # Copy files
        Copy-Item "dist/VisoLingua.exe" "$portableDir/"
        Copy-Item "config/config.ini" "$portableDir/"
        Copy-Item "README.md" "$portableDir/" -ErrorAction SilentlyContinue
        Copy-Item "SETUP.md" "$portableDir/" -ErrorAction SilentlyContinue
        Copy-Item "WINDOWS_INSTALLATION.md" "$portableDir/" -ErrorAction SilentlyContinue
        
        # Create launcher script
        $launcherScript = @'
@echo off
REM VisoLingua Portable Launcher

echo Starting VisoLingua...

REM Check if config exists, create if not
if not exist "config.ini" (
    echo First run - creating default config...
    echo Please configure your API keys in the Settings window.
    echo.
)

REM Start the application
start "" "VisoLingua.exe"

REM Optional: Wait and check if it started
timeout /t 2 /nobreak >nul
tasklist /fi "imagename eq VisoLingua.exe" | find /i "VisoLingua.exe" >nul
if %errorlevel% equ 0 (
    echo ‚úÖ VisoLingua started successfully!
) else (
    echo ‚ö†Ô∏è  VisoLingua may have failed to start.
    echo Check for error messages or missing dependencies.
    pause
)
'@
        $launcherScript | Out-File -FilePath "$portableDir/Start VisoLingua.bat" -Encoding ascii
        
        # Create desktop shortcut script
        $shortcutScript = @'
@echo off
REM Create Desktop Shortcut for VisoLingua Portable

set "CURRENT_DIR=%CD%"
set "SHORTCUT_NAME=VisoLingua.lnk"

echo Creating desktop shortcut...
echo Target: %CURRENT_DIR%\VisoLingua.exe

REM Try to find the correct desktop path (OneDrive or local)
set "DESKTOP_DIR=%USERPROFILE%\Desktop"
if not exist "%DESKTOP_DIR%" (
    set "DESKTOP_DIR=%USERPROFILE%\OneDrive\Desktop"
)
if not exist "%DESKTOP_DIR%" (
    set "DESKTOP_DIR=%PUBLIC%\Desktop"
)

echo Desktop path: %DESKTOP_DIR%

REM Check if desktop folder exists
if not exist "%DESKTOP_DIR%" (
    echo ‚ùå Desktop folder not found. Checked:
    echo    - %USERPROFILE%\Desktop
    echo    - %USERPROFILE%\OneDrive\Desktop  
    echo    - %PUBLIC%\Desktop
    pause
    exit /b 1
)

REM Check if executable exists
if not exist "%CURRENT_DIR%\VisoLingua.exe" (
    echo ‚ùå VisoLingua.exe not found in current directory
    pause
    exit /b 1
)

REM Create shortcut with proper error handling
powershell -ExecutionPolicy Bypass -Command "try { $WshShell = New-Object -ComObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%DESKTOP_DIR%\%SHORTCUT_NAME%'); $Shortcut.TargetPath = '%CURRENT_DIR%\VisoLingua.exe'; $Shortcut.WorkingDirectory = '%CURRENT_DIR%'; $Shortcut.Description = 'VisoLingua - Live Translation Overlay Tool'; $Shortcut.Save(); Write-Host 'Shortcut created successfully' } catch { Write-Host 'Error:' $_.Exception.Message; exit 1 }"

if %errorlevel% equ 0 (
    echo ‚úÖ Desktop shortcut created successfully!
    echo    Location: %DESKTOP_DIR%\%SHORTCUT_NAME%
) else (
    echo ‚ùå Failed to create desktop shortcut
    echo    Try running as administrator if the problem persists
)

pause
'@
        $shortcutScript | Out-File -FilePath "$portableDir/Create Desktop Shortcut.bat" -Encoding ascii
        
        # Create portable README
        $readmeContent = @'
# VisoLingua Portable

Diese portable Version von VisoLingua ben√∂tigt keine Installation.

## Erste Verwendung:

1. **Starten**: Doppelklick auf "Start VisoLingua.bat"
2. **API-Keys**: Einstellungen √∂ffnen und API-Schl√ºssel eingeben
3. **Desktop-Icon** (optional): "Create Desktop Shortcut.bat" ausf√ºhren

## Dateien:

- `VisoLingua.exe` - Hauptanwendung
- `config.ini` - Konfigurationsdatei (wird beim ersten Start erstellt)
- `Start VisoLingua.bat` - Empfohlener Starter
- `Create Desktop Shortcut.bat` - Desktop-Icon erstellen

## API-Keys konfigurieren:

1. VisoLingua starten
2. Settings-Button klicken
3. API-Keys eingeben:
   - **Gemini**: https://aistudio.google.com/
   - **OpenAI**: https://platform.openai.com/
4. Standard-LLM ausw√§hlen (empfohlen: Gemini 2.5 Flash)
5. Speichern

## Verwendung:

1. Rotes Overlay-Fenster √ºber Text positionieren
2. In das Fenster klicken
3. √úbersetzung wird automatisch angezeigt
4. "Back to Capture" f√ºr neue √úbersetzung

Vollst√§ndige Anleitung: README.md
'@
        $readmeContent | Out-File -FilePath "$portableDir/PORTABLE_README.txt" -Encoding utf8
        
        Write-Host "‚úÖ Portable package created: $portableDir"
        
    - name: Create ZIP archive
      run: |
        Compress-Archive -Path "VisoLingua-Portable" -DestinationPath "VisoLingua-Portable-Windows.zip"
        Write-Host "‚úÖ ZIP archive created"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: VisoLingua-Windows-Portable
        path: |
          VisoLingua-Portable-Windows.zip
          dist/VisoLingua.exe
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: VisoLingua ${{ github.event.inputs.version || github.ref_name }}
        draft: false
        prerelease: false
        body: |
          # VisoLingua ${{ github.event.inputs.version || github.ref_name }}
          
          ## üöÄ Neue Version verf√ºgbar!
          
          ### üì¶ Downloads:
          - **VisoLingua-Portable-Windows.zip**: Komplettes portable Paket (empfohlen)
          - **VisoLingua.exe**: Nur die Anwendung
          
          ### üîß Installation:
          1. ZIP-Datei herunterladen und entpacken
          2. "Start VisoLingua.bat" ausf√ºhren
          3. API-Keys in den Einstellungen konfigurieren
          
          ### üõ°Ô∏è Anti-Virus Hinweis:
          Diese Version wurde mit optimierten Einstellungen gebaut um False-Positives zu reduzieren.
          
          ### üìã Systemanforderungen:
          - Windows 10/11
          - Internetverbindung f√ºr API-Aufrufe
          - API-Keys f√ºr Gemini oder OpenAI
        files: |
          VisoLingua-Portable-Windows.zip
          dist/VisoLingua.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}